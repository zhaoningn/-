耦合：程序间的依赖
	包括：
		类之间的依赖
		方法间的依赖
解耦：
	降低程序间的依赖关系  

实际开发中 ，应该做到： 编译期不依赖，运行期才依赖

解耦的思路：
	一，使用反射来创建对象，而避免使用new关键字。
	二，通过读取配置文件来获取要创建的对象全限定类名。


一，

获取spring的Ioc核心容器，并根据id获取对象
 * ApplicationContext的三个常用实现类
 *          ClassPathXmlApplicationContext  它可以加载类路径下的配置文件，要求配置文件必须在类路径下，不在加载不了
 *          FileSystemXmlApplicationContext     它可以加载磁盘任意路径下的配置文件（必须有访问权限 ）
 *          AnnotationConfigApplicationContext     它是用于读取注解创建容器的，
 * 核心容器的两个接口引发出的问题：
 *  ApplicationContext:     单例对象适用
 *      它在构建核心容器时，创建对象采用的策略时采用立即加载的方式，也就是说，只要一读取完配置文件，马上就创建配置文件中配置的对象
 *  BeanFactory:            多例对象使用
 *      它在创建核心容器时，创建对象采取的策略是延迟加载的方式，也就是说，什么时候根据id获取对象了，什么时候才真正的创建对象

       1 获取核心容器对象
        ApplicationContext ac = new ClassPathXmlApplicationContext("bean.xml");
       2 根据id获取bean对象
        IAccountService as = (IAccountService)ac.getBean("accountService");
        IAccountDao accountDao = ac.getBean("accountDao",IAccountDao.class);
 
二，

把对象创建交给spring来管理
spring中的依赖注入
        依赖注入:
                Dependenct Injection
        Ioc的作用：
                降低程序间的耦合（依赖关系）
        依赖关系的管理：
                以后都交给spring来维护
           在当前类需要用到其他类的对象，由spring为我们提供，我们只需要在配置文件中说明
           依赖关系的维护：
                   称之为依赖注入
           依赖注入：
                    能注入的数据有三类：
                                基本类型和string
                                其他Bean类型（在配置文件中或者注解配置过的bean）
                                复杂类型/集合类型
                    注入的方式：有三种
                        第一种：使用构造函数提供
                        第二种：使用set方法提供
                        第三种：使用注解提供

spring对bean的管理细节
	1，创建bean的三种方式
	2，bean对象的作用范围
	3，bean对象的生命周期


第一种方式  使用默认构造函数创建
	在spring的配置文件中 使用bean标签，配以id和class属性之后，且没有其他属性和标签时，
	采用的就是默认构造函数创建bean对象，此时如果类中没有默认构造函数，则对象无法创建

第二种方式 使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）

<bean id = "instanceFactory" class = "org.zhaoning.factory.InstanceFactory"></bean>

<bean id = "accountService" factory-bean ="instanceFactory" factory-method = "getAccountService"></bean>
	     工厂里的方法			对应工厂		                  工厂中创建对象的方法

第三种方式  使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器）



<bean id = "accountService"   class="org.zhaoning.factory.StaticFactory"  factory-method = "getAccountService"></bean>


三，

bean的作用范围调整
	bean标签的scope属性：
		作用：用于指定bean的作用范围
		取值：常用的就是单例的和多例的
			singleton		单例的（默认值）
			prototype	多例的
			request		作用于web应用的请求范围
			session		作用于web应用的会话范围
			global -session	作用于集群环境的会话范围（全局会话范围），当不是集群环境时，它就是session


四，
bean对象的生命周期
	单例对象
	        出生  当容器创建时，对象出生
	        活着  只要容器还在，对象一直活着
	        死亡  容器销毁，对象消亡
	        总结  单例对象的生命周期和容器相同
	多例对象
	        出生	 当我们使用对象时spring框架为我们创建
	        活着	 对象只要是在使用过程中就一直活着。
	        死亡	 当对象长时间不用，且没有别的对象引用时，由java的垃圾回收器回收

五，
spring的依赖注入
1）
构造函数注入：
           使用的标签：constructor-arg
           标签出现的位置：bean标签的内部
           标签中的属性
                    type：用于指定要注入的数据类型，该数据类型也是构造函数中某个或某些参数的类型
                    index：用于指定要注入的数据，给构造函数中指定索引位置的参数赋值，索引位置是从0开始
                    name：用于指定给构造函数中指定名称的参数赋值    （常用）
                    ===================以上三个用于指定给构造函数中那个参数赋值=======================
                    value：用于提供基本类型和String类型的数据
                    ref：用于指定其他的bean类型数据，它指的就是在spring的ioc容器中出现过的bean对象
           优势：
                在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功。
           弊端：
                改变了bean对象的实例化方式，是我们在创建对象时，如果用不到这些数据，也必须提供
 <bean id = "accountService" class="org.zhaoning.service.impl.AccountServiceImpl">
        <constructor-arg name="name" value="test"></constructor-arg>
        <constructor-arg name="age"  value="18"></constructor-arg>
        <constructor-arg name="birthday" ref="now"></constructor-arg>
 </bean>



2）
set方式注入             更常用set方式注入
         涉及的标签：property
         出现的位置：bean标签的内部
         标签的属性：
                    name：用于指定注入时所调用的set方法名称
                    value：用于提供基本类型和String类型的数据
                    ref：用于指定其他的bean类型数据，它指的就是在spring的ioc容器中出现过的bean对象
          优势：
                创建对象时没有明确的限制，可以直接使用默认构造函数。
          弊端：
                如果有某个成员必须有值，则获取对象有可能set方法没有执行。
<bean id = "accountService2" class="org.zhaoning.service.impl.AccountServiceImpl2">
        <property name="name" value="text"></property>
        <property name="age"  value="21"></property>
        <property name="birthday" ref="now"></property>
</bean>


3）
复杂类型的注入/集合类型的注入
        用于给List结构集合注入的标签：
            list，array，set
        用于给Map结构集合注入的标签：
            map，props
        结构相同，标签可以互换
-->
    <bean id = "accountService3" class="org.zhaoning.service.impl.AccountServiceImpl3">
        <property name="myStrs">
            <array>
                <value>aaa</value>
                <value>bbb</value>
                <value>ccc</value>
            </array>
        </property>
        <property name="myList">
            <list>
                <value>aaa</value>
                <value>bbb</value>
                <value>ccc</value>
            </list>
        </property>
        <property name="mySet">
            <set>
                <value>aaa</value>
                <value>bbb</value>
                <value>ccc</value>
            </set>
        </property>
        <property name="myMap">
            <props>
                <prop key="testc">ccc</prop>
            </props>
        </property>
        <property name="myPros" >
            <map>
                <entry key="testa" value="aaa"></entry>
                <entry key="testb">
                    <value>bbb</value>
                </entry>
            </map>

        </property>
    </bean>

                   































