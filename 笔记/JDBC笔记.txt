*使用JDBC操作数据库时，如果对数据库进行了更换，只需要替换：驱动（jar包），具体驱动类，连接字符串，用户名（数据库名），密码（数据库密码）
*先开的后关，后开的先关
				if(rs !=null)                        rs.close();			
				if (stmt != null)                  stmt.close();
				if (connection != null)        connection.close();


1. JDBC ：Java DataBase Connectivity  可以为多种关系型数据库DBMS 提供统一的
2.JDBC  API  ：提供了各种操作接口   （接口，方法，类）
3.JDBC DriverManager ：管理不同的数据库驱动 （Oracle驱动/mysql驱动）
4.各种数据库驱动：	相应的数据库厂商提供的（第三方公司提供，谁开发数据库谁提供 （jar包）  ），
	作用： 连接/直接操作数据库。

	
     



5.数据库驱动        

		驱动jar包				具体驱动类					连接字符串
Oracle		ojdbc-x.jar                                              	oracle.jdbc.OracleDriver.class			            jdbc:oracle:thin:@localhost:1521:数据库实例名

MySQL		mysql-connector-java-x.jar		com.mysql.jdbc.Driver.class			            jdbc:mysql://localhost:3306/数据库实例名

SqlServer                sql jdbc -x.jar			com.microsoft.sqlserver.jdbc.SQLServerDriver.class           jabc:microsoft:sqlserver:localhost:1433:databasename=数据库实例名

 x---->版本号

6.jar包下载
	1.去 maven库   ：  jar包 + mvn         网址 mvn/mvnrepository 开头
	2.去Oracle官网下载
	3.Oracle安装目录    下载Oracle自带





7.  JDBC  API：
	1.Java程序与数据库建立连接
	2.Java程序给数据库发送sql语句
	3.数据库返回处理结果
	4.处理结果集 （增删改不需要处理 ，查询需要处理）


8.  JDBC API通过以 下类/接口（方法）实现：
	DriverManager	: 管理JDBC驱动
		|
		|
	               \|/
	Connection              ：实现连接    （通过DriverManager产生）  
		|
		|
	               \|/
	Statement 对象（PerparedStatemen t对象）	 ：实现增删改查        （通过Connection产生）      Connection.createStatement()     Connection.perpareStatement()
	CallableStatement  对象		：调用数据库中 存储过程/存储函数     （通过Connection产生） Connection.perpareCall()
		|
		|
	               \|/
	Result	：返回的结果集		（上面的 ment等产生）


9.JDBC访问数据库的具体步骤：
     1.导入驱动程序（jar包），加载具体的驱动类（jar包中的那一个类）。
       	 a. 将jar包复制到项目中
	 b.增加到内路径中   右击jar包 --->Build Path ---> Add to Build Path
	 c.加载具体的驱动类       oracle.jdbc--->OracleDriver.class            java代码  --->Class.forName("oracle.jdbc.OracleDriver");  

     2.与数据库建立连接
	需要知道 ：
		IP地址+端口号+数据库实例名 --->连接字符串      //从很多数据库中定位数据库
		 用户名 ：数据库名    scott		        // 权限
		 密码  ：数据库密码   tiger
	java代码--->   Connection connection =  DriverManager.getConnection(连接字符串，用户名，密码);    //结束时关闭   if(connection!=null) connection.close

     3.发送sql，执行sql
	java代码--->（增删改）
		    Statement stmt = connection.creatStatement();           //结束时关闭   if(stmt!=null)   stmt.close
		    String sql = "insert into bonus values('zs','jl',4,5)";
		    //执行  增加语句       stmt.executeUpdate(sql);
		    int count = stmt.executeUpdate(sql);  //返回值表示增删改了几条数据  if (count>0) 操作成功
	java代码--->（查询）
		    Statement stmt = connection.creatStatement();          //结束时关闭   if(stmt!=null)   stmt.close
		    String sql = "select * from student";
		    //执行  查询语句       stmt.executeQuery(sql);
		     ResultSet rs = stmt.executeQuery(sql);  //返回值表示增删改了几条数据  if (count>0) 操作成功




查询：
   rs 默认指向结果集的前一行  
	rs.next();   ：     //遍历
		1.下移	
		2.判断下移之后的元素是否有数据
		      有数据返回 true	
		       没有返回 false
	rs.

      	rs.getXxx(字段名/位置);   :     获取rs指向行的数据
		 -->getInt();   getString();   getDate(); 
             



PreparedStatement 与 Stetement 在使用时的区别：
1.Statement :
	sql
	executeUpdate(sql)
2.PreparedStatement :
	sql (可能存在占位符  ？）
	在创建PreparedStatement 对象时，将sql预编译 prepareStatement(sql)
	setXxx()替换占位符 ？	
	execueteUpdate()
	




推荐使用PreparedStatement：
1.编码更加简便(避免了字符串的拼接)
String name ="zs";
int age = 23;

stmt:
String sql = "insert into student    (stuno,stuname)    values   ('"+name+"' , "+age+")  ";
stmt.executeUpdate(sql);

pstmt:
String sql ="insert into student    (stuno,stuname)    values(?,?)  ";
pstmt = connection.prepareStatement(sql);     预编译sql
pstmt.setString(1,name);
pstmt.setInt(2,age);
pstmt.executeUpdate();


2.提高性能（因为有预编译操作，预编译只需要执行一次）
需要重复增加100条数（批量处理）
stmt:
String sql = "insert into student (stuno,stuname)  values  ('"+name+"' , "+age+")  ";
for(100)
stmt.executeUpdate(sql);

pstmt: 
String sql ="insert into student    (stuno,stuname)    values(?,?)  ";
pstmt = connection.prepareStatement(sql);     预编译sql
pstmt.setString(1,name);
pstmt.setInt(2,age);
for(100)
pstmt.executeUpdate();


3.安全（可以有效防止sql注入）
sql注入：将客户输入的内容 和 开发人员的sql混为一体

stmt：存在被sql注入的风险
（例如  输入  用户名：任意值 ' or 1=1 --
 	        密码：任意值  ）

处理CLOB/BLOB类型
  处理稍大型数据：
a. 存取路径	
	通过JDBC存储文件路径，然后 根据IO操作处理








